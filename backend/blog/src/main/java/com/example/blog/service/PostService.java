package com.example.blog.service;

import com.example.blog.model.Post;
import com.example.blog.model.User;
import com.example.blog.repository.PostRepository;
import com.example.blog.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

@Service
public class PostService {

    private final PostRepository postRepository;
    private final UserRepository userRepository;

    public PostService(PostRepository postRepository, UserRepository userRepository) {
        this.postRepository = postRepository;
        this.userRepository = userRepository;
    }

    // L·∫•y danh s√°ch b√†i vi·∫øt
    public List<Post> getAllPosts() {
        return postRepository.findAll();
    }

    // T√¨m b√†i vi·∫øt theo ID
    public Post getPostById(Long id) {
        if (!postRepository.existsById(id)) {
            throw new RuntimeException("Post not found");
        }
        return postRepository.findById(id).get();
    }


    // 1T·∫°o b√†i vi·∫øt (Create) - Kh√¥ng d√πng Optional
    public Post creatPost(Post post) {
        if (post.getAuthor() == null || post.getAuthor().getId() == null) {
            throw new RuntimeException("Author ID is required");
        }

        User author = userRepository.findById(post.getAuthor().getId()).orElse(null);
        if (author == null) {
            throw new RuntimeException("User not found");
        }

        post.setAuthor(author);
        post.setCreatedAt(LocalDateTime.now());

        return postRepository.save(post);
    }

    // X√≥a b√†i vi·∫øt theo ID
    public void deletePost(Long id) {
        postRepository.deleteById(id);
    }

    // C·∫≠p nh·∫≠t b√†i vi·∫øt theo ID (update)
    public Post updatePost(Long id, Post updatedPost) {
        if (!postRepository.existsById(id)) {
            throw new RuntimeException("Post not found");
        }

        // üîπ L·∫•y b√†i vi·∫øt c≈© t·ª´ DB
        Post existingPost = postRepository.findById(id).get();

        // üîπ C·∫≠p nh·∫≠t d·ªØ li·ªáu m·ªõi nh∆∞ng gi·ªØ nguy√™n `createdAt`
        existingPost.setTitle(updatedPost.getTitle());
        existingPost.setPostContent(updatedPost.getPostContent());
        existingPost.setCreatedAt(existingPost.getCreatedAt()); // Gi·ªØ nguy√™n th·ªùi gian t·∫°o

        // üîπ Ki·ªÉm tra v√† c·∫≠p nh·∫≠t t√°c gi·∫£ (b·∫Øt bu·ªôc ph·∫£i c√≥)
        if (updatedPost.getAuthor() == null || updatedPost.getAuthor().getId() == null) {
            throw new RuntimeException("Author ID is required");
        }
        existingPost.setAuthor(updatedPost.getAuthor());

        return postRepository.save(existingPost);
    }



}